import numpy as np
import matplotlib.pyplot as plt


def show_csd_1D(points_x, csd, show_ele=None, show_kcsd=False):
    fig = plt.figure(figsize=(5,5))
    ax1 = plt.subplot(111)
    if show_kcsd is False:
        ax1.plot(points_x, csd, 'g', label='CSD', linestyle='--', linewidth=3)
    else:
        ax1.plot(points_x, csd, 'g', label='kCSD', linestyle='-', linewidth=3)
    if show_ele is not None:
        ax1.plot(show_ele, np.zeros_like(show_ele), 'ko', label='Electrodes', markersize=2.)
    else:
        pass
    max_csd = max(np.abs(csd))
    max_csd += max_csd*0.2
    ax1.set_ylim([-max_csd, max_csd])
    ax1.set_xlabel('Position mm')
    ax1.set_ylabel('CSD mA/mm')
    plt.legend()
    return

def show_pot_1D(ele_pos, pot):
    fig = plt.figure(figsize=(5,5))
    ax1 = plt.subplot(111)
    ax1.plot(ele_pos, pot, 'orange', label='Potential', linestyle='--', linewidth=3)
    ax1.plot(ele_pos, np.zeros_like(ele_pos), 'ko', label='Electrodes', markersize=2.)
    max_pot = max(np.abs(pot))
    max_pot += max_pot*0.2
    ax1.set_ylim([-max_pot, max_pot])
    ax1.set_xlabel('Position mm')
    ax1.set_ylabel('Potential mV')
    plt.legend()
    return


def make_plots_1D(title, 
                  chrg_x, csd, 
                  ele_x, pots, 
                  csd_x, est_csd, est_pot, 
                  true_pot=None):
    """
    Shows 2 subplots
    1_a true CSD generated based on the random seed given
    1_b kernel CSD the output of this method
    2_a pots - true potentials, generated by simpsons rule integration
    2_b Kernel interpolated LFP, 
    """
    fig = plt.figure(figsize=(7,10))
    #CSDs
    ax1 = plt.subplot(211)
    if np.array(csd_x).any() != False:
        im1b = ax1.plot(csd_x, est_csd[:,0], 'r', label='kCSD', linewidth=3)
    im1a = ax1.plot(chrg_x, csd, 'g', label = 'CSD', linestyle='--', linewidth=3)
    ax1.plot(ele_x, np.zeros_like(ele_x), 'ko',markersize=2.)
    plt.legend() 
    ax1.set_xlim([0.,1.])
    #ax1.set_ylim(ax1.get_ylim()[::-1]) #Zero on the top --ASK?!
    max_csd = np.maximum(max(np.abs(csd)), max(np.abs(est_csd[:,0])))
    max_csd += max_csd*0.2
    ax1.set_ylim([-max_csd, max_csd])
    ax1.set_xlabel('Depth mm')
    ax1.set_ylabel('CSD mA/mm')
    #Potentails
    ax2 = plt.subplot(212)
    ax2.plot( ele_x, np.zeros_like(ele_x),'ko',markersize=2.)
    im2b = ax2.plot(csd_x, est_pot, 'b', label = 'kPOT', linewidth=3)
    im2a = ax2.plot(chrg_x,true_pot, color = 'orange', 
                    linestyle='--', label='TruePOT', linewidth=3)
    ax2.set_xlim([0.,1.])
    #ax2.set_ylim(ax2.get_ylim()[::-1]) #Zero on the top --ASK?!
    ax2.plot(ele_x, pots, 'kx', markersize=8.)
    max_pots = np.maximum(max(np.abs(true_pot)), max(np.abs(est_pot)))
    max_pots += max_pots*0.2
    ax2.set_xlabel('Depth mm')
    ax2.set_ylabel('Potential mV')
    ax2.set_ylim([-max_pots, max_pots])
    fig.suptitle(title)
    plt.legend()
    plt.show()
    return 
